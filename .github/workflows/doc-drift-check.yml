name: Documentation Drift Audit

on:
  schedule:
    - cron: '0 0 1 * *'  # Monthly on 1st
  workflow_dispatch:  # Manual trigger
  pull_request:
    paths:
      - 'docs/**'
      - 'hyperkit-agent/docs/**'
      - 'hyperkit-agent/scripts/doc_drift_audit.py'

jobs:
  doc-drift-check:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Run documentation drift audit
      id: audit
      run: |
        python hyperkit-agent/scripts/doc_drift_audit.py
        echo "audit_exit_code=$?" >> $GITHUB_OUTPUT
    
    - name: Upload audit results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: doc-drift-audit-${{ github.run_number }}
        path: hyperkit-agent/REPORTS/doc_drift_audit_*.json
        retention-days: 30
    
    - name: Parse audit results
      id: parse_results
      if: always()
      run: |
        # Find the latest audit report
        REPORTS_DIR="hyperkit-agent/REPORTS"
        if [ -d "$REPORTS_DIR" ]; then
          LATEST_FILE=$(ls -t $REPORTS_DIR/doc_drift_audit_*.json 2>/dev/null | head -n1)
          if [ -n "$LATEST_FILE" ]; then
            echo "audit_file=$LATEST_FILE" >> $GITHUB_OUTPUT
            
            # Extract key metrics
            TOTAL_ISSUES=$(jq '.drift_detected | length' "$LATEST_FILE")
            HIGH_SEVERITY=$(jq '[.drift_detected[] | select(.severity == "high")] | length' "$LATEST_FILE")
            MEDIUM_SEVERITY=$(jq '[.drift_detected[] | select(.severity == "medium")] | length' "$LATEST_FILE")
            LOW_SEVERITY=$(jq '[.drift_detected[] | select(.severity == "low")] | length' "$LATEST_FILE")
            
            echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            echo "high_severity=$HIGH_SEVERITY" >> $GITHUB_OUTPUT
            echo "medium_severity=$MEDIUM_SEVERITY" >> $GITHUB_OUTPUT
            echo "low_severity=$LOW_SEVERITY" >> $GITHUB_OUTPUT
            
            # Determine if action is needed
            if [ "$HIGH_SEVERITY" -gt 0 ] || [ "$MEDIUM_SEVERITY" -gt 5 ]; then
              echo "action_needed=true" >> $GITHUB_OUTPUT
            else
              echo "action_needed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "audit_file=" >> $GITHUB_OUTPUT
            echo "total_issues=0" >> $GITHUB_OUTPUT
            echo "action_needed=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "audit_file=" >> $GITHUB_OUTPUT
          echo "total_issues=0" >> $GITHUB_OUTPUT
          echo "action_needed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create issue if drift detected
      if: steps.parse_results.outputs.action_needed == 'true' && github.event_name != 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const auditFile = '${{ steps.parse_results.outputs.audit_file }}';
          const totalIssues = parseInt('${{ steps.parse_results.outputs.total_issues }}');
          const highSeverity = parseInt('${{ steps.parse_results.outputs.high_severity }}');
          const mediumSeverity = parseInt('${{ steps.parse_results.outputs.medium_severity }}');
          const lowSeverity = parseInt('${{ steps.parse_results.outputs.low_severity }}');
          
          if (auditFile && fs.existsSync(auditFile)) {
            const auditData = JSON.parse(fs.readFileSync(auditFile, 'utf8'));
            
            // Get high priority issues
            const highIssues = auditData.drift_detected
              .filter(item => item.severity === 'high')
              .slice(0, 10)
              .map(item => `- **${item.file}**:${item.line || 'N/A'} - ${item.pattern}`)
              .join('\n');
            
            // Get medium priority issues
            const mediumIssues = auditData.drift_detected
              .filter(item => item.severity === 'medium')
              .slice(0, 10)
              .map(item => `- **${item.file}**:${item.line || 'N/A'} - ${item.pattern}`)
              .join('\n');
            
            const issueBody = '## 📊 Documentation Drift Detected\n\n' +
              '**Audit Date**: ' + auditData.timestamp + '\n' +
              '**Total Issues**: ' + totalIssues + '\n' +
              '**High Severity**: ' + highSeverity + '\n' +
              '**Medium Severity**: ' + mediumSeverity + '\n' +
              '**Low Severity**: ' + lowSeverity + '\n\n' +
              '### 🚨 High Priority Issues\n' +
              (highIssues || 'None') + '\n\n' +
              '### ⚠️ Medium Priority Issues\n' +
              (mediumIssues || 'None') + '\n\n' +
              '### 📋 Recommendations\n' +
              auditData.recommendations.map(rec => '- ' + rec).join('\n') + '\n\n' +
              '### 🔧 Action Required\n' +
              'Please review and fix the documentation drift issues identified in the audit report.\n\n' +
              '**Audit Report**: `' + path.basename(auditFile) + '`\n\n' +
              '---\n' +
              '*This issue was automatically created by the Documentation Drift Audit workflow.*';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📚 Documentation Drift Audit - ${totalIssues} issues detected`,
              body: issueBody,
              labels: ['documentation', 'maintenance', 'priority:high', 'automated']
            });
          }
    
    - name: Comment on PR with audit results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const totalIssues = parseInt('${{ steps.parse_results.outputs.total_issues }}');
          const highSeverity = parseInt('${{ steps.parse_results.outputs.high_severity }}');
          const mediumSeverity = parseInt('${{ steps.parse_results.outputs.medium_severity }}');
          
          let commentBody = '## 📚 Documentation Drift Check Results\n\n';
          
          if (totalIssues === 0) {
            commentBody += '✅ **No documentation drift detected!**\n\nAll documentation appears to be up to date.';
          } else {
            commentBody += `**Issues Detected**: ${totalIssues}\n`;
            commentBody += `- High Severity: ${highSeverity}\n`;
            commentBody += `- Medium Severity: ${mediumSeverity}\n\n`;
            
            if (highSeverity > 0) {
              commentBody += '🚨 **High priority issues detected** - please review and fix before merging.\n\n';
            } else if (mediumSeverity > 5) {
              commentBody += '⚠️ **Multiple medium priority issues detected** - consider addressing before merging.\n\n';
            } else {
              commentBody += 'ℹ️ **Minor issues detected** - consider addressing in future updates.\n\n';
            }
            
            commentBody += 'See the workflow logs for detailed information about each issue.';
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });
    
    - name: Fail workflow if critical issues found
      if: steps.parse_results.outputs.high_severity > 0 && github.event_name == 'pull_request'
      run: |
        echo "🚨 Critical documentation issues detected. Please fix before merging."
        exit 1
