name: Version Automation

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      auto_push:
        description: "Automatically push changes"
        required: false
        default: false
        type: boolean

jobs:
  version_update:
    name: Update Version
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r hyperkit-agent/requirements.txt
      
      - name: Run version bump
        run: |
          python hyperkit-agent/scripts/ci/version_bump.py ${{ github.event.inputs.bump_type }}
      
      - name: Update documentation versions
        run: |
          python hyperkit-agent/scripts/ci/update_version_in_docs.py
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Push changes (if enabled)
        if: github.event.inputs.auto_push == 'true'
        run: |
          git push origin main --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release (if auto_push enabled)
        if: github.event.inputs.auto_push == 'true'
        run: |
          # Get the new version from VERSION file (source of truth)
          NEW_VERSION=$(cat VERSION | tr -d '\n')
          TAG_NAME="v${NEW_VERSION}"
          echo "New version: ${NEW_VERSION}"
          echo "Tag name: ${TAG_NAME}"
          
          # Create GitHub release
          gh release create ${TAG_NAME} \
            --title "Release ${NEW_VERSION}" \
            --notes "Automated release via version workflow" \
            --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
