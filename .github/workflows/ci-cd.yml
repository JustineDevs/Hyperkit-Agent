name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:  # Allow manual triggers

env:
  # Fix: Set UTF-8 encoding globally to prevent charmap errors
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1

jobs:
  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false  # Continue other jobs if one fails
      matrix:
        # Fixed: Removed Python 3.9 (incompatible with pattern matching)
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5  # Updated to v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Cache pip dependencies for faster builds
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          cd hyperkit-agent
          # Install core dependencies (ipfshttpclient moved to optional)
          pip install -r requirements.txt
          # Try to install optional dependencies (continue on failure)
          pip install -r requirements-optional.txt || echo "⚠️ Optional dependencies not available"
      
      - name: Verify Alith SDK installation
        run: |
          python -c "from alith import Agent; print('✅ Alith SDK installed successfully')"
        continue-on-error: false  # Fail if Alith not available
      
      - name: Run Python tests
        run: |
          cd hyperkit-agent
          pytest tests/ -v --tb=short \
            --cov=core \
            --cov=services \
            --cov-report=xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing
        env:
          # AI Provider API Keys for testing
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          # Test environment variables
          TEST_MODE: true
          HYPERION_RPC_URL: https://hyperion-testnet.metisdevops.link
          # Fix: Encoding environment variables
          PYTHONIOENCODING: utf-8
          LC_ALL: C.UTF-8
          LANG: C.UTF-8
      
      - name: Run code quality checks
        run: |
          cd hyperkit-agent
          echo "Running Black..."
          black --check core/ services/ || echo "⚠️ Black formatting issues found"
          
          echo "Running Flake8..."
          flake8 core/ services/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "⚠️ Flake8 issues found"
          
          echo "Running isort..."
          isort --check-only core/ services/ || echo "⚠️ isort issues found"
        continue-on-error: true  # Don't fail on linting issues (yet)
      
      - name: Run security checks
        run: |
          cd hyperkit-agent
          bandit -r core/ services/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./hyperkit-agent/coverage.xml  # Fixed: Correct path
          flags: unittests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Upload test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            hyperkit-agent/htmlcov/
            hyperkit-agent/bandit-report.json
            hyperkit-agent/*.log

  changeset-check:
    name: Changeset Validation (Optional)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    continue-on-error: true  # Don't block PRs on changeset
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changeset
        run: |
          if [ -d ".changeset" ]; then
            echo "✅ Changeset directory found"
            if [ "$(find .changeset -name "*.md" -not -name "README.md" | wc -l)" -gt 0 ]; then
              echo "✅ Changeset files found"
              find .changeset -name "*.md" -not -name "README.md"
              exit 0
            else
              echo "ℹ️  No changeset files (optional for this PR)"
              exit 0
            fi
          else
            echo "ℹ️  No .changeset directory (changesets are optional)"
            exit 0
          fi

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test]  # Removed changeset-check dependency
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Build Python package
        run: |
          cd hyperkit-agent
          python -m pip install --upgrade pip
          pip install build twine
          python -m build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: hyperkit-agent/dist/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: hyperkit-agent/dist/
      
      - name: Create Release
        run: |
          echo "Creating release from changeset..."
          if [ -d ".changeset" ]; then
            echo "Changeset directory found, creating release"
            # For now, just echo the changeset files
            find .changeset -name "*.md" -not -name "README.md"
          else
            echo "No changeset directory found"
          fi
