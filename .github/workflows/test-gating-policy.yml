name: Test Gating Policy

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test-gating:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e "hyperkit-agent[dev]"
      
      - name: Run static analysis
        run: |
          cd hyperkit-agent
          python -m pytest tests/unit -v --tb=short || true
      
      - name: Run integration tests
        run: |
          cd hyperkit-agent
          python -m pytest tests/integration -v --tb=short || true
      
      - name: Run E2E tests with coverage
        id: e2e_tests
        run: |
          cd hyperkit-agent
          python -m pytest tests/e2e/test_cli_commands_e2e.py -v --tb=short --junit-xml=junit-report.xml
      
      - name: Parse test results
        if: always()
        run: |
          if [ -f "hyperkit-agent/junit-report.xml" ]; then
            echo "Test results found"
          else
            echo "No test results found"
          fi
      
      - name: Generate coverage report
        if: ${{ steps.e2e_tests.outcome == 'success' }}
        run: |
          cd hyperkit-agent
          python -m pytest tests/e2e/test_cli_commands_e2e.py --cov=. --cov-report=xml --cov-report=term-missing || true
      
      - name: Upload coverage to Codecov
        if: ${{ steps.e2e_tests.outcome == 'success' }}
        uses: codecov/codecov-action@v4
        with:
          files: ./hyperkit-agent/coverage.xml
          flags: e2e
          fail_ci_if_error: false
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const xml = fs.readFileSync('hyperkit-agent/junit-report.xml', 'utf8');
            const parser = require('xml2js').parseString;
            
            parser(xml, (err, result) => {
              if (err) return;
              
              const tests = result.testsuites.testsuite[0].$.tests;
              const failures = result.testsuites.testsuite[0].$.failures || '0';
              const errors = result.testsuites.testsuite[0].$.errors || '0';
              
              const status = (failures === '0' && errors === '0') ? '✅ PASSING' : '❌ FAILING';
              
              const comment = `## Test Gating Policy Results
              
              **Status**: ${status}
              
              **Test Results**:
              - Total Tests: ${tests}
              - Failures: ${failures}
              - Errors: ${errors}
              
              **Gating Policy**: This PR will be blocked from merging until all tests pass.
              
              **Required**: All CLI commands must pass E2E tests before merge.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            });
      
      - name: Fail if tests don't pass
        if: steps.e2e_tests.outcome != 'success'
        run: |
          echo "❌ Test gating policy failed: E2E tests must pass"
          exit 1
