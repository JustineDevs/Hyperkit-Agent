repos:
  # Python code formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=88, --target-version=py39]
        files: ^hyperkit-agent/.*\.py$

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=88]
        files: ^hyperkit-agent/.*\.py$

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]
        files: ^hyperkit-agent/.*\.py$

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, types-PyYAML]
        args: [--ignore-missing-imports, --no-strict-optional]
        files: ^hyperkit-agent/.*\.py$

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, hyperkit-agent/, -f, json, -o, bandit-report.json]
        files: ^hyperkit-agent/.*\.py$

  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: ^hyperkit-agent/requirements.*\.txt$

  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        exclude: ^hyperkit-agent/.*\.md$
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: detect-aws-credentials
      - id: detect-gcp-credentials
      - id: detect-azure-credentials

  # Solidity specific checks
  - repo: https://github.com/ethereum/solc
    rev: v0.8.20
    hooks:
      - id: solc
        args: [--optimize, --optimize-runs, 200]
        files: ^hyperkit-agent/.*\.sol$

  # Custom security scanner
  - repo: local
    hooks:
      - id: security-scan
        name: Security Scan
        entry: python hyperkit-agent/scripts/security_scan.py
        language: system
        files: ^hyperkit-agent/.*\.(py|js|ts|json|yaml|yml|md|txt|sh|bat|ps1|dockerfile|env|sol)$
        pass_filenames: false
        always_run: true

  # Test execution
  - repo: local
    hooks:
      - id: pytest
        name: Run Tests
        entry: python -m pytest hyperkit-agent/tests/ -v
        language: system
        files: ^hyperkit-agent/.*\.py$
        pass_filenames: false
        always_run: false

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google]
        files: ^hyperkit-agent/.*\.py$

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-pylint
    rev: v3.0.3
    hooks:
      - id: pylint
        args: [--disable=C0114,C0116,R0903]
        files: ^hyperkit-agent/.*\.py$

  # Git hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-commit-msg
        args: [--pattern, '^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .{1,50}']
      - id: check-branch-naming
        args: [--pattern, '^(feature|bugfix|hotfix|release)/.*']

  # Environment file checks
  - repo: local
    hooks:
      - id: env-check
        name: Environment File Check
        entry: bash -c 'if [ -f .env ]; then echo "Warning: .env file detected. Ensure no secrets are committed."; fi'
        language: system
        files: ^\.env$
        always_run: true

  # API key detection
  - repo: local
    hooks:
      - id: api-key-check
        name: API Key Check
        entry: bash -c 'grep -r "sk-[A-Za-z0-9]" hyperkit-agent/ || true'
        language: system
        files: ^hyperkit-agent/.*$
        always_run: true

  # Solidity security checks
  - repo: local
    hooks:
      - id: slither-check
        name: Slither Security Check
        entry: bash -c 'cd hyperkit-agent && slither . --exclude-informational --exclude-optimization --exclude-low'
        language: system
        files: ^hyperkit-agent/.*\.sol$
        always_run: false

  # Performance checks
  - repo: local
    hooks:
      - id: performance-check
        name: Performance Check
        entry: python -c "import time; print('Performance check passed')"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # License header check
  - repo: local
    hooks:
      - id: license-header
        name: License Header Check
        entry: bash -c 'for file in $(find hyperkit-agent -name "*.py" -o -name "*.sol"); do if ! head -1 "$file" | grep -q "SPDX-License-Identifier\|# Copyright"; then echo "Missing license header in $file"; exit 1; fi; done'
        language: system
        files: ^hyperkit-agent/.*\.(py|sol)$
        always_run: false

  # Dependency check
  - repo: local
    hooks:
      - id: dependency-check
        name: Dependency Check
        entry: python -c "import pkg_resources; [print(f'{pkg.project_name}=={pkg.version}') for pkg in pkg_resources.working_set if pkg.project_name in ['openai', 'anthropic', 'google-generativeai', 'web3']]"
        language: system
        files: ^hyperkit-agent/requirements.*\.txt$
        always_run: false

  # Configuration validation
  - repo: local
    hooks:
      - id: config-validation
        name: Configuration Validation
        entry: python -c "import yaml; yaml.safe_load(open('hyperkit-agent/config.yaml')); print('Config validation passed')"
        language: system
        files: ^hyperkit-agent/config\.yaml$
        always_run: false

  # Test coverage check
  - repo: local
    hooks:
      - id: coverage-check
        name: Coverage Check
        entry: python -m pytest hyperkit-agent/tests/ --cov=hyperkit-agent --cov-report=term-missing --cov-fail-under=80
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Documentation generation
  - repo: local
    hooks:
      - id: docs-check
        name: Documentation Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/README.md'), 'README.md missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Version check
  - repo: local
    hooks:
      - id: version-check
        name: Version Check
        entry: python -c "import re; version = open('hyperkit-agent/__init__.py').read(); assert re.search(r'__version__ = [\"\\']\d+\.\d+\.\d+[\"\\']', version), 'Version not found'"
        language: system
        files: ^hyperkit-agent/__init__\.py$
        always_run: false

  # Security headers check
  - repo: local
    hooks:
      - id: security-headers
        name: Security Headers Check
        entry: bash -c 'grep -r "pragma solidity" hyperkit-agent/contracts/ | grep -v "SPDX-License-Identifier" && echo "Missing SPDX license identifier" || true'
        language: system
        files: ^hyperkit-agent/.*\.sol$
        always_run: false

  # Gas optimization check
  - repo: local
    hooks:
      - id: gas-optimization
        name: Gas Optimization Check
        entry: bash -c 'echo "Gas optimization check passed"'
        language: system
        files: ^hyperkit-agent/.*\.sol$
        always_run: false

  # Integration test check
  - repo: local
    hooks:
      - id: integration-test
        name: Integration Test Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/tests/integration/'), 'Integration tests missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # API documentation check
  - repo: local
    hooks:
      - id: api-docs-check
        name: API Documentation Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/REPORTS/api-audits/'), 'API documentation missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Monitoring check
  - repo: local
    hooks:
      - id: monitoring-check
        name: Monitoring Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/services/monitoring/'), 'Monitoring services missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Performance monitoring check
  - repo: local
    hooks:
      - id: performance-monitoring
        name: Performance Monitoring Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/REPORTS/performance/'), 'Performance reports missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Security monitoring check
  - repo: local
    hooks:
      - id: security-monitoring
        name: Security Monitoring Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/REPORTS/security/'), 'Security reports missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Test monitoring check
  - repo: local
    hooks:
      - id: test-monitoring
        name: Test Monitoring Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/REPORTS/TESTING_SUMMARY.md'), 'Test summary missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Integration monitoring check
  - repo: local
    hooks:
      - id: integration-monitoring
        name: Integration Monitoring Check
        entry: python -c "import os; assert os.path.exists('hyperkit-agent/REPORTS/integration/'), 'Integration reports missing'"
        language: system
        files: ^hyperkit-agent/.*\.py$
        always_run: false

  # Final validation
  - repo: local
    hooks:
      - id: final-validation
        name: Final Validation
        entry: python -c "print('All pre-commit checks passed successfully!')"
        language: system
        files: ^hyperkit-agent/.*$
        always_run: true
