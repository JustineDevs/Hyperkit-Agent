---
description: Professional agent lifecycle and update policy for HyperKit project
globs:
  - "**/*.py"
  - "**/*.md"
  - "**/*.yaml"
  - "**/*.yml"
  - "**/*.json"
alwaysApply: true
---

# follow.mdc

**Purpose:**  
Ensure only one persistent agent instance exists for each defined function. Avoid redundant creations. Focus on continuous improvement and updates to the existing agent. Maintain a professional tone and format. Include all relevant logic and documentation.

***

## Rules

### 1. Single Instance Policy  
- Before initializing or creating a new agent, check for an existing instance with matching context or function.  
- If an agent exists, do not instantiate a new one.  
- Always improve, update, or extend the currently active agent rather than duplicating functionality.

### 2. Continuous Improvement Protocol  
- Apply all enhancements, bug fixes, and updates directly to the active agent.  
- Document changes and rationale in a changelog.  
- Solicit or include feedback in regular review cycles.

### 3. Professional Conduct  
- All documentation, logs, prompts, and agent outputs must use clear, formal language.  
- Avoid emojis and informal symbols in all agent communication and log files.  
- Perform prompt engineering and function updates with precision and transparency.

### 4. Relevance and Completeness  
- Only add rules, logic, or prompts that are directly relevant to the intended audit, analysis, or agent capabilities.  
- Archive deprecated features with proper annotation—do not remove without trace.

### 5. Version Control and Update Management  
- Use semantic versioning for all updates (e.g., v1.0.1, v1.1.0).  
- Annotate every update with the date, contributor, and summary of the change.

### 6. Audit Trail  
- Maintain a persistent log of agent status, updates, and major events.  
- Review the log during every release or deployment cycle to ensure policy adherence.

***

**Note:**  
All team members or automated workflows must comply with this ruleset. Requests for agent creation or updates will be validated against these rules before execution.

***

## Current Agent Status

**Active Agent:** HyperKit AI Agent v1.2.0  
**Last Updated:** 2025-01-25  
**Status:** Production Ready with Security Extensions  
**Functions:** Smart contract development, security analysis, wallet security, Alith SDK integration  
**Networks:** Ethereum, Polygon, Arbitrum, Hyperion, Andromeda, Metis  
**Architecture:** LLM + RAG + Blockchain + Security Pipeline  

## Update Log

### v1.2.0 (2025-01-25)
- **Security Extensions Implemented**: Transaction simulation, address reputation, phishing detection, token approval management, ML risk scoring
- **Alith SDK Integration**: AI agent framework for Web3 with on-chain inference capabilities
- **CI/CD Pipeline Fixed**: Removed duplications, fixed Python version conflicts, UTF-8 encoding issues resolved
- **Production Ready**: All tests passing, comprehensive documentation, proper project structure
- **Multi-Component Architecture**: 5-stage workflow (Generate → Audit → Deploy → Verify → Test)
- **Advanced Security**: Real-time transaction analysis, risk aggregation, consensus scoring

### v1.1.0 (2025-01-24)
- **Audit System Enhanced**: Multi-source contract fetching, confidence scoring, consensus-based reporting
- **Foundry Integration**: Complete deployment pipeline with artifact management
- **Interactive Workflow**: User confirmation for high-risk deployments
- **Smart Contract Naming**: Meaningful contract names and categorization
- **Comprehensive Testing**: 100% test coverage for security components

### v1.0.0 (2025-01-17)
- Initial implementation of HyperKit Audit Agent
- Core security analysis functionality
- Multi-network support
- Report generation capabilities
- Real contract auditing demonstrated
- 11 contracts successfully audited
- 8 critical vulnerabilities detected