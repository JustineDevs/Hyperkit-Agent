# Docker Compose for HyperKit AI Agent Production System
# This file sets up the complete production environment with all required services

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hyperkit-postgres
    environment:
      POSTGRES_DB: hyperkit_production
      POSTGRES_USER: hyperkit
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hyperkit -d hyperkit_production"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hyperkit-network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: hyperkit-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hyperkit-network

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: hyperkit-api
    environment:
      - DATABASE_URL=postgresql://hyperkit:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/hyperkit_production
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./contracts:/app/contracts
    networks:
      - hyperkit-network
    restart: unless-stopped

  # Celery Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: hyperkit-worker
    environment:
      - DATABASE_URL=postgresql://hyperkit:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/hyperkit_production
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379/0
    command: celery -A backend.jobs.celery worker --loglevel=info --concurrency=4
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./contracts:/app/contracts
    networks:
      - hyperkit-network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  beat:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: hyperkit-beat
    environment:
      - DATABASE_URL=postgresql://hyperkit:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/hyperkit_production
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A backend.jobs.celery beat --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
    networks:
      - hyperkit-network
    restart: unless-stopped

  # Celery Flower (Monitoring)
  flower:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: hyperkit-flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    command: celery -A backend.jobs.celery flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - hyperkit-network
    restart: unless-stopped

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: hyperkit-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
    networks:
      - hyperkit-network
    restart: unless-stopped

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: hyperkit-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - hyperkit-network
    restart: unless-stopped

  # Grafana (Monitoring Dashboard)
  grafana:
    image: grafana/grafana:latest
    container_name: hyperkit-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - hyperkit-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hyperkit-network:
    driver: bridge
