{
  "name": "GeneratedContract",
  "contract_address": "0x49592D0Ac2371Fa8b05928dF5519fE71B373330c",
  "source_code": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title TestToken\n * @author Smart Contract Generator\n * @notice A secure, production-ready ERC20 token named 'TestToken' (TEST).\n * @dev This contract implements a standard ERC20 token with a fixed supply of 1,000,000 tokens.\n * It integrates OpenZeppelin's secure, community-vetted implementations for ERC20,\n * ownership control (Ownable), pausable token transfers (Pausable), and user-initiated\n * token burning (Burnable).\n */\ncontract TestToken is ERC20, ERC20Burnable, ERC20Pausable, Ownable {\n    /**\n     * @notice Initializes the contract, sets the token name, symbol, and initial owner.\n     * @dev Mints the total supply of 1,000,000 tokens to the `initialOwner`.\n     * The `initialOwner` is also granted ownership of the contract, which allows\n     * them to call privileged functions like `pause` and `unpause`.\n     * @param initialOwner The address to receive the entire initial supply and contract ownership.\n     */\n    constructor(address initialOwner)\n        ERC20(\"TestToken\", \"TEST\")\n        Ownable(initialOwner)\n    {\n        // The total supply is 1,000,000 tokens.\n        // Since ERC20 decimals are typically 18, we multiply by 10**18.\n        uint256 initialSupply = 1_000_000 * 10**decimals();\n        _mint(initialOwner, initialSupply);\n    }\n\n    /**\n     * @notice Pauses all token transfers, approvals, and burns.\n     * @dev This function can only be called by the contract owner. It serves as an\n     * emergency stop mechanism. Emits a {Paused} event.\n     * Requirements:\n     * - The contract must not be already paused.\n     * - The caller must be the owner.\n     */\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    /**\n     * @notice Resumes all token transfers, approvals, and burns.\n     * @dev This function can only be called by the contract owner to lift a previously\n     * triggered pause. Emits an {Unpaused} event.\n     * Requirements:\n     * - The contract must be paused.\n     * - The caller must be the owner.\n     */\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Overrides the internal `_update` function from ERC20 to apply the `whenNotPaused`\n     * modifier from the ERC20Pausable extension. This is the core mechanism that ensures\n     * all state-changing token operations (transfers, mints, burns) are halted when\n     * the contract is paused.\n     *\n     * This override is required by the Solidity compiler because `_update` is defined in both\n     * parent contracts (`ERC20` and `ERC20Pausable`).\n     *\n     * See {ERC20-_update} and {Pausable-whenNotPaused}.\n     */\n    function _update(address from, address to, uint256 value)\n        internal\n        override(ERC20, ERC20Pausable)\n    {\n        super._update(from, to, value);\n    }\n}",
  "verification_timestamp": "2025-10-25T04:54:04.073206Z",
  "verification_method": "ipfs_storage"
}