// @description: ERC721 NFT with customizable features
// @category: nft
// @variable: nft_name: string - NFT collection name
// @variable: nft_symbol: string - NFT collection symbol
// @variable: base_uri: string - Base URI for token metadata
// @variable: max_supply: uint256 - Maximum supply (0 for unlimited)
// @variable: mintable: bool - Enable minting capability
// @variable: burnable: bool - Enable burning capability

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
// @if ${burnable}
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
// @endif

contract ${nft_name|capitalize}NFT is ERC721, ERC721URIStorage, Ownable
// @if ${burnable}
    , ERC721Burnable
// @endif
{
    uint256 private _nextTokenId;
    // @if ${max_supply}
    uint256 public constant MAX_SUPPLY = ${max_supply};
    // @endif
    string private _baseTokenURI;

    constructor(address initialOwner)
        ERC721("${nft_name}", "${nft_symbol}")
        Ownable(initialOwner)
    {
        _baseTokenURI = "${base_uri}";
    }

    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    function setBaseURI(string memory baseURI) public onlyOwner {
        _baseTokenURI = baseURI;
    }

    // @if ${mintable}
    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _nextTokenId++;
        // @if ${max_supply}
        require(tokenId < MAX_SUPPLY, "Max supply reached");
        // @endif
        _safeMint(to, tokenId);
    }
    // @endif

    // The following functions are overrides required by Solidity.
    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}

