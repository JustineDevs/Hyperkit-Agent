// @description: Standard ERC20 Token with customizable features
// @category: tokens
// @variable: token_name: string - Token name
// @variable: token_symbol: string - Token symbol
// @variable: initial_supply: uint256 - Initial token supply
// @variable: decimals: uint8 - Number of decimals (default: 18)
// @variable: mintable: bool - Enable minting capability
// @variable: burnable: bool - Enable burning capability
// @variable: pausable: bool - Enable pause/unpause functionality

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
// @if ${mintable}
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
// @endif
// @if ${burnable}
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
// @endif
// @if ${pausable}
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol";
// @endif

contract ${token_name|capitalize}Token is ERC20, Ownable
// @if ${burnable}
    , ERC20Burnable
// @endif
// @if ${pausable}
    , ERC20Pausable
// @endif
{
    constructor(address initialOwner)
        ERC20("${token_name}", "${token_symbol}")
        Ownable(initialOwner)
    {
        _mint(initialOwner, ${initial_supply} * 10 ** ${decimals|default:18});
    }

    // @if ${mintable}
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }
    // @endif

    // @if ${pausable}
    function pause() public onlyOwner {
        _pause();
    }

    function unpause() public onlyOwner {
        _unpause();
    }

    function _update(address from, address to, uint256 value)
        internal
        override(ERC20, ERC20Pausable)
    {
        super._update(from, to, value);
    }
    // @endif
}

