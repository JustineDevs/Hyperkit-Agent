name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run linters
      run: |
        pip install black isort flake8 mypy
        black --check hyperkit-agent/
        isort --check-only hyperkit-agent/
        flake8 hyperkit-agent/ --max-line-length=120
    
    - name: Validate no mock mode in production code
      run: |
        cd hyperkit-agent
        python -c "
        import os
        import re
        from pathlib import Path
        
        # Check for mock/deprecated patterns in production code
        patterns = {
            'mock.*mode': r'mock.*mode|Mock.*mode|MOCK.*MODE',
            'obsidian.*rag': r'obsidian.*rag|Obsidian.*RAG',
            'lazai.*agent': r'lazai.*agent|LazAI.*Agent|LAZAI.*AGENT'
        }
        
        issues = []
        exclude_dirs = {'__pycache__', '.git', 'node_modules', '.pytest_cache', 'tests'}
        
        for root, dirs, files in os.walk('.'):
            # Skip excluded directories
            dirs[:] = [d for d in dirs if d not in exclude_dirs]
            
            for file in files:
                if file.endswith('.py') and 'test' not in file.lower():
                    file_path = Path(root) / file
                    try:
                        content = file_path.read_text(encoding='utf-8')
                        for pattern_name, pattern in patterns.items():
                            matches = re.findall(pattern, content, re.IGNORECASE)
                            if matches and 'deprecated' not in content.lower()[:200]:
                                issues.append(f'{file_path}: {pattern_name} found')
                    except:
                        pass
        
        if issues:
            print('❌ Found deprecated patterns in production code:')
            for issue in issues[:10]:  # Show first 10
                print(f'  - {issue}')
            exit(1)
        else:
            print('✅ No deprecated patterns found in production code')
        "
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=hyperkit-agent --cov-report=xml --cov-report=term
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Build Solidity contracts
      run: |
        cd hyperkit-agent
        forge build
    
    - name: Run Solidity tests
      run: |
        cd hyperkit-agent
        forge test -vvv
    
    - name: Cleanroom deployment test
      run: |
        cd hyperkit-agent
        # Test that contracts can be deployed from artifacts
        python -c "
        from services.deployment.foundry_deployer import FoundryDeployer
        deployer = FoundryDeployer()
        # Verify network configs exist with correct chain IDs
        expected_chain_ids = {'hyperion': 133717, 'lazai': 9001, 'metis': 1088}
        for network, expected_id in expected_chain_ids.items():
            config = deployer.get_network_config(network)
            assert config is not None, f'Network {network} not configured'
            assert 'chain_id' in config, f'Network {network} missing chain_id'
            assert config['chain_id'] == expected_id, f'Network {network} has wrong chain_id: {config[\"chain_id\"]}, expected {expected_id}'
            assert 'rpc_url' in config, f'Network {network} missing rpc_url'
        print('✅ Cleanroom deployment validation passed')
        print('✅ Network chain IDs validated (Hyperion: 133717, LazAI: 9001, Metis: 1088)')
        "
    
    - name: Validate config alignment
      run: |
        cd hyperkit-agent
        python -c "
        from core.config.manager import ConfigManager
        import os
        
        # Set minimal test config (required for validation)
        os.environ.setdefault('DEFAULT_PRIVATE_KEY', '0' * 64)  # Test key
        os.environ.setdefault('HYPERION_RPC_URL', 'https://hyperion-testnet.metisdevops.link')
        os.environ.setdefault('HYPERION_CHAIN_ID', '133717')
        
        try:
            config = ConfigManager()
            print('✅ Config manager initialization passed')
            print('✅ Config validation working correctly')
        except Exception as e:
            print(f'⚠️ Config validation issue (expected in CI): {e}')
            # Don't fail - config may not be fully set in CI
        "

  new-developer-onboarding:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Foundry
      uses: foundry-rs/foundry-toolchain@v1
      with:
        version: nightly
    
    - name: Run 30-minute onboarding test
      run: |
        cd hyperkit-agent
        chmod +x tests/test_new_developer_onboarding.sh
        # Run test but allow failure to not block CI (it's a validation test)
        ./tests/test_new_developer_onboarding.sh || echo "⚠️ Onboarding test found issues - see output above"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        pip install bandit safety
        bandit -r hyperkit-agent/ -f json -o bandit-report.json || true
        safety check --json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Build package
      run: |
        python -m pip install --upgrade pip build
        python -m build
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

