name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd hyperkit-agent
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run unit tests
      run: |
        cd hyperkit-agent
        pytest tests/unit/ -v --tb=short || true
    
    - name: Run E2E tests (system integration only)
      run: |
        cd hyperkit-agent/tests/e2e
        pytest test_complete_workflow.py::TestSystemIntegration -v --tb=short || true
    
    - name: Check code style
      run: |
        cd hyperkit-agent
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Build Solidity contracts
      run: |
        cd hyperkit-agent
        forge build
    
    - name: Run Solidity tests
      run: |
        cd hyperkit-agent
        forge test -vvv
    
    - name: Cleanroom deployment test (Hyperion-only)
      run: |
        cd hyperkit-agent
        # Test that contracts can be deployed from artifacts
        python -c "
        from services.deployment.foundry_deployer import FoundryDeployer
        deployer = FoundryDeployer()
        # Verify Hyperion network config exists with correct chain ID (Hyperion-only mode)
        expected_chain_id = 133717
        config = deployer.get_network_config('hyperion')
        assert config is not None, 'Hyperion network not configured'
        assert 'chain_id' in config, 'Hyperion network missing chain_id'
        assert config['chain_id'] == expected_chain_id, f'Hyperion has wrong chain_id: {config[\"chain_id\"]}, expected {expected_chain_id}'
        assert 'rpc_url' in config, 'Hyperion network missing rpc_url'
        
        # Verify non-Hyperion networks fail (Hyperion-only enforcement)
        for non_hyperion in ['lazai', 'metis', 'ethereum', 'polygon']:
            try:
                deployer.get_network_config(non_hyperion)
                assert False, f'Network {non_hyperion} should not be supported in Hyperion-only mode'
            except ValueError:
                pass  # Expected - non-Hyperion networks should raise ValueError
        
        print('✅ Cleanroom deployment validation passed')
        print('✅ Hyperion-only mode validated (Chain ID: 133717)')
        print('✅ Non-Hyperion networks correctly rejected')
        "
    
    - name: Validate config alignment
      run: |
        cd hyperkit-agent
        python -c "
        from core.config.loader import get_config
        config = get_config()
        # Validate Hyperion-only configuration
        assert 'networks' in config.to_dict()
        networks = config.to_dict()['networks']
        assert 'hyperion' in networks, 'Hyperion network must be configured'
        assert networks['hyperion']['chain_id'] == 133717, 'Hyperion chain ID must be 133717'
        
        # Verify no other networks are configured
        allowed_networks = ['hyperion']
        for network in networks.keys():
            if network not in allowed_networks:
                print(f'⚠️  WARNING: Network {network} found in config (should be Hyperion-only)')
        
        print('✅ Configuration validated for Hyperion-only mode')
        "
