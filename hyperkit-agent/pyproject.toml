[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hyperkit-agent"
version = "1.5.1"
description = "HyperKit AI Agent - Production-ready smart contract development platform with security extensions and Alith SDK integration"
readme = "README.md"
requires-python = ">=3.10,<4.0"
license = {text = "MIT"}
authors = [
    {name = "HyperKit Team", email = "hyperkitdev@gmail.com"}
]
keywords = ["blockchain", "smart-contracts", "ai", "security", "defi", "web3"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "click>=8.1.0,<9.0",
    "rich>=13.0.0,<14.0",
    "pydantic>=2.0.0,<3.0",
    "python-dotenv>=1.0.0,<2.0",
    "web3>=7.6.0,<8.0",
    "eth-account>=0.13.6,<1.0",
    "eth-utils>=5.0.0,<6.0",
    "eth-keys>=0.5.0,<0.6",
    "eth-typing>=5.0.0,<6.0",
    "google-generativeai>=0.3.0,<1.0",
    "openai>=1.3.0,<2.0",
    "anthropic>=0.7.0,<1.0",
    "alith>=0.12.0,<1.0",
    "ipfshttpclient>=0.8.0a2,<1.0",
    # LazAI removed - network-only, NOT an AI agent. Use Alith SDK for AI.
    "pyyaml>=6.0.0,<7.0",
    "jsonschema>=4.18.0,<5.0",
    "requests>=2.31.0,<3.0",
    "httpx>=0.24.0,<1.0",
    "aiohttp>=3.8.0,<4.0",
    "structlog>=23.1.0,<24.0",
    "python-json-logger>=2.0.7,<3.0",
    "loguru>=0.7.0,<1.0",
    "tenacity>=8.2.0,<9.0",
    "ratelimit>=2.2.1,<3.0",
    "cachetools>=5.3.0,<6.0",
    "urllib3>=2.5.0,<3.0",
    "typing-extensions>=4.12.0,<5.0",
    "platformdirs>=4.2.0,<5.0",
    "chromadb>=0.4.0,<1.0",
    "reportlab>=4.0.0,<5.0",
    "openpyxl>=3.1.0,<4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0",
    "pytest-asyncio>=0.21.0,<0.22",
    "pytest-cov>=4.1.0,<5.0",
    "pytest-mock>=3.12.0,<4.0",
    "pytest-xdist>=3.5.0,<4.0",
    "black>=23.0.0,<24.0",
    "flake8>=6.0.0,<7.0",
    "mypy>=1.4.0,<2.0",
    "isort>=5.12.0,<6.0",
    "pre-commit>=3.0.0,<4.0",
    "bandit>=1.7.0,<2.0",
    "safety>=2.3.0,<3.0",
]
security = [
    "slither-analyzer>=0.9.0,<1.0",
    "mythril>=0.23.0,<1.0",
    "bandit>=1.7.0,<2.0",
    "safety>=2.3.0,<3.0",
]
docs = [
    "sphinx>=7.0.0,<8.0",
    "sphinx-rtd-theme>=1.3.0,<2.0",
]

[project.scripts]
hyperagent = "cli.main:cli"

[project.urls]
Homepage = "https://github.com/JustineDevs/Hyperkit-Agent"
Documentation = "https://github.com/JustineDevs/Hyperkit-Agent/tree/main/hyperkit-agent/docs"
Repository = "https://github.com/JustineDevs/Hyperkit-Agent"
Issues = "https://github.com/JustineDevs/Hyperkit-Agent/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "services*", "tests*", "cli*"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["core", "services"]

[tool.mypy]
python_version = "1.5.1"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "web3.*",
    "eth_account.*",
    "slither.*",
    "mythril.*",
    "alith.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=core",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "contracts: marks tests as contract tests",
]

[tool.coverage.run]
source = ["core", "services"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
