{
  "scan_results": {
    "scan_date": "2025-10-28T16:30:51.899649",
    "legacy_files": [],
    "unimplemented_features": [],
    "future_tense_docs": [],
    "todo_files": [],
    "summary": {
      "total_files_scanned": 399,
      "legacy_references": 25,
      "unimplemented_features": 8,
      "future_tense_docs": 15,
      "todo_files": 7
    },
    "shell_scripts": [
      {
        "file": ".\\README.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh"
        ],
        "lines": [
          6,
          7,
          8,
          9,
          10,
          11,
          693,
          736,
          737,
          738
        ]
      },
      {
        "file": ".\\docs\\EMERGENCY_RESPONSE.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "emergency_patch.sh",
          "emergency_patch.sh",
          "emergency_patch.sh"
        ],
        "lines": [
          271,
          327,
          331
        ]
      },
      {
        "file": ".\\docs\\INTEGRATOR_GUIDE.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "contract.sh"
        ],
        "lines": [
          306
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "emergency_response.sh",
          "recovery_procedures.sh",
          "verify_recovery.sh"
        ],
        "lines": [
          448,
          472,
          496
        ]
      },
      {
        "file": ".\\docs\\GUIDE\\IPFS_RAG_GUIDE.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "sync_vectors.sh"
        ],
        "lines": [
          268
        ]
      },
      {
        "file": ".\\docs\\TEAM\\ENVIRONMENT_SETUP.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "getfoundry.sh"
        ],
        "lines": [
          468
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\README.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "img.sh",
          "img.sh",
          "img.sh",
          "img.sh"
        ],
        "lines": [
          3,
          4,
          7,
          8
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\erc4626-tests\\README.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "getfoundry.sh",
          "getfoundry.sh"
        ],
        "lines": [
          49,
          89
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\CONTRIBUTING.md",
        "pattern": "\\./scripts/",
        "matches": [
          "./scripts/",
          "./scripts/",
          "./scripts/"
        ],
        "lines": [
          106,
          111
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\README.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "getfoundry.sh",
          "getfoundry.sh"
        ],
        "lines": [
          5,
          254
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\scripts\\upgradeable\\README.md",
        "pattern": "[a-zA-Z_]+\\.sh",
        "matches": [
          "transpile.sh",
          "onto.sh",
          "apply.sh",
          "save.sh",
          "apply.sh",
          "save.sh"
        ],
        "lines": [
          5,
          9,
          17,
          19,
          21
        ]
      }
    ],
    "future_tense": [
      {
        "file": ".\\requirements-optional.txt",
        "pattern": "will be",
        "matches": [
          "will be"
        ],
        "lines": [
          6
        ]
      },
      {
        "file": ".\\SECURITY.md",
        "pattern": "will be",
        "matches": [
          "will be"
        ],
        "lines": [
          312
        ]
      },
      {
        "file": ".\\docs\\TEAM\\LAZAI_REGISTRATION_REQUEST.md",
        "pattern": "will create",
        "matches": [
          "will create"
        ],
        "lines": [
          220
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CHANGELOG.md",
        "pattern": "will be",
        "matches": [
          "will be",
          "will be",
          "will be",
          "will be"
        ],
        "lines": [
          611,
          612,
          613,
          1172
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CHANGELOG.md",
        "pattern": "will have",
        "matches": [
          "will have"
        ],
        "lines": [
          786
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CODE_OF_CONDUCT.md",
        "pattern": "will be",
        "matches": [
          "will be"
        ],
        "lines": [
          59
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CONTRIBUTING.md",
        "pattern": "will be",
        "matches": [
          "will be"
        ],
        "lines": [
          34
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\SECURITY.md",
        "pattern": "will be",
        "matches": [
          "will be",
          "will be",
          "will be",
          "will be"
        ],
        "lines": [
          15,
          27,
          29
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\audits\\2017-03.md",
        "pattern": "will be",
        "matches": [
          "will be",
          "will be",
          "will be"
        ],
        "lines": [
          187,
          255,
          273
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\CONTRIBUTING.md",
        "pattern": "will be",
        "matches": [
          "will be",
          "will be"
        ],
        "lines": [
          51,
          69
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\CONTRIBUTING.md",
        "pattern": "will have",
        "matches": [
          "will have"
        ],
        "lines": [
          114
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\halmos-cheatcodes\\README.md",
        "pattern": "will be",
        "matches": [
          "will be"
        ],
        "lines": [
          5
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\halmos-cheatcodes\\README.md",
        "pattern": "will provide",
        "matches": [
          "will provide"
        ],
        "lines": [
          73
        ]
      },
      {
        "file": ".\\REPORTS\\archive\\fixes\\production-readiness-assessment.md",
        "pattern": "will be",
        "matches": [
          "will be"
        ],
        "lines": [
          504
        ]
      },
      {
        "file": ".\\REPORTS\\IPFS_RAG\\IPFS_RAG_BEST_PRACTICES.md",
        "pattern": "will be",
        "matches": [
          "will be"
        ],
        "lines": [
          168
        ]
      }
    ],
    "todo_markers": [
      {
        "file": ".\\requirements-optional.txt",
        "pattern": "NOTE:",
        "matches": [
          "Note:",
          "Note:"
        ],
        "lines": [
          5,
          29
        ]
      },
      {
        "file": ".\\requirements.txt",
        "pattern": "NOTE:",
        "matches": [
          "Note:",
          "Note:"
        ],
        "lines": [
          6,
          85
        ]
      },
      {
        "file": ".\\docs\\TROUBLESHOOTING_GUIDE.md",
        "pattern": "TODO:",
        "matches": [
          "TODO:",
          "TODO:",
          "TODO:",
          "TODO:",
          "TODO:"
        ],
        "lines": [
          79,
          151,
          175,
          198,
          260
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\workflow-command.md",
        "pattern": "BUG:",
        "matches": [
          "bug:"
        ],
        "lines": [
          103
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\audits\\2017-03.md",
        "pattern": "NOTE:",
        "matches": [
          "Note:"
        ],
        "lines": [
          235
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\README.md",
        "pattern": "NOTE:",
        "matches": [
          "NOTE:"
        ],
        "lines": [
          116
        ]
      },
      {
        "file": ".\\REPORTS\\IPFS_RAG\\IPFS_RAG_FINAL_ASSESSMENT.md",
        "pattern": "NOTE:",
        "matches": [
          "Note:"
        ],
        "lines": [
          307
        ]
      }
    ],
    "unimplemented_commands": [
      {
        "file": ".\\docs\\EMERGENCY_RESPONSE.md",
        "pattern": "hyperagent emergency_",
        "matches": [
          "hyperagent emergency_"
        ],
        "lines": [
          332
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "hyperagent backup_",
        "matches": [
          "hyperagent backup_",
          "hyperagent backup_",
          "hyperagent backup_",
          "hyperagent backup_",
          "hyperagent backup_"
        ],
        "lines": [
          275,
          278,
          281,
          290,
          299
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "hyperagent restore_",
        "matches": [
          "hyperagent restore_",
          "hyperagent restore_",
          "hyperagent restore_"
        ],
        "lines": [
          153,
          188,
          478
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "hyperagent emergency_",
        "matches": [
          "hyperagent emergency_",
          "hyperagent emergency_",
          "hyperagent emergency_"
        ],
        "lines": [
          147,
          182,
          457
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "hyperagent verify_",
        "matches": [
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_"
        ],
        "lines": [
          156,
          191,
          339,
          357,
          481,
          505
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "hyperagent notify_",
        "matches": [
          "hyperagent notify_"
        ],
        "lines": [
          460
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "hyperagent isolate_",
        "matches": [
          "hyperagent isolate_"
        ],
        "lines": [
          463
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "pattern": "hyperagent archive_",
        "matches": [
          "hyperagent archive_"
        ],
        "lines": [
          296
        ]
      }
    ],
    "python_scripts": [
      {
        "file": ".\\docs\\OBSIDIAN_RAG_SETUP_GUIDE.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python test_rag_connections.py",
          "python test_rag_connections.py"
        ],
        "lines": [
          76,
          205
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\GENERATED_FILES.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py"
        ],
        "lines": [
          23,
          38,
          94,
          97,
          148,
          151,
          154,
          197,
          200,
          206,
          209,
          236,
          239,
          246,
          249
        ]
      },
      {
        "file": ".\\docs\\GUIDE\\HyperKit_MCP_Builder_Prompt_Specification.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python hyperkit_mcp_server.py",
          "python hyperkit_mcp_server.py",
          "python hyperkit_mcp_server.py",
          "python hyperkit_mcp_server.py"
        ],
        "lines": [
          513,
          516,
          626,
          629
        ]
      },
      {
        "file": ".\\docs\\INTEGRATION\\LAZAI_INTEGRATION_GUIDE.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python test_lazai_integration.py"
        ],
        "lines": [
          55
        ]
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\CONTRIBUTING.md",
        "pattern": "\\.py --",
        "matches": [
          ".py --"
        ],
        "lines": [
          111
        ]
      },
      {
        "file": ".\\REPORTS\\archive\\fixes\\CRITICAL_FIXES_SUMMARY.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python test_real_implementations.py"
        ],
        "lines": [
          157
        ]
      },
      {
        "file": ".\\REPORTS\\integration\\INTEGRATION_STATUS.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py",
          "python cli.py"
        ],
        "lines": [
          51,
          54,
          57,
          63,
          66
        ]
      },
      {
        "file": ".\\REPORTS\\IPFS_RAG\\IPFS_RAG_BEST_PRACTICES.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python setup.py",
          "python train_embeddings.py",
          "python train_embeddings.py",
          "python generate_vectors.py"
        ],
        "lines": [
          217,
          219,
          237,
          238
        ]
      },
      {
        "file": ".\\REPORTS\\model-tests\\alibaba_dashscope_report.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py"
        ],
        "lines": [
          41
        ]
      },
      {
        "file": ".\\REPORTS\\model-tests\\anthropic_claude_report.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py"
        ],
        "lines": [
          41
        ]
      },
      {
        "file": ".\\REPORTS\\model-tests\\deepseek_report.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py"
        ],
        "lines": [
          41
        ]
      },
      {
        "file": ".\\REPORTS\\model-tests\\google_gemini_report.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py"
        ],
        "lines": [
          47
        ]
      },
      {
        "file": ".\\REPORTS\\model-tests\\openai_report.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py"
        ],
        "lines": [
          41
        ]
      },
      {
        "file": ".\\REPORTS\\model-tests\\xai_(grok)_report.md",
        "pattern": "python [a-zA-Z_]+\\.py",
        "matches": [
          "python cli.py"
        ],
        "lines": [
          41
        ]
      }
    ]
  },
  "disaster_files": [
    {
      "file": ".\\docs\\EMERGENCY_RESPONSE.md",
      "type": "disaster_recovery",
      "status": "needs_review"
    },
    {
      "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
      "type": "disaster_recovery",
      "status": "needs_review"
    }
  ],
  "legacy_scripts": [
    {
      "file": "scripts\\cleanup_legacy_files.sh",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\cleanup_mock_integrations.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\cli_command_validation.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\debug_deployment_error.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\doc_drift_audit.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\doc_drift_cleanup.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\emergency_patch.sh",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\fix_pydantic_validators.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\install_cli.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\install_mythril_windows.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\install_precommit.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\integration_sdk_audit.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\legacy_file_inventory.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\mythril_wrapper.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\prepare_rag_templates.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\repo_health_dashboard.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\security_scan.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\setup_mcp_docker.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\setup_rag_vectors.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\update_version_in_docs.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\upload_rag_templates_to_ipfs.py",
      "type": "script",
      "status": "needs_review"
    },
    {
      "file": "scripts\\zero_excuse_culture.py",
      "type": "script",
      "status": "needs_review"
    }
  ],
  "recommendations": {
    "archive_candidates": [
      {
        "file": ".\\docs\\EXECUTION\\GENERATED_FILES.md",
        "reason": "Multiple legacy script references",
        "matches": 15
      }
    ],
    "not_implemented_candidates": [
      {
        "file": ".\\docs\\EMERGENCY_RESPONSE.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent emergency_"
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent backup_",
          "hyperagent backup_",
          "hyperagent backup_",
          "hyperagent backup_",
          "hyperagent backup_"
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent restore_",
          "hyperagent restore_",
          "hyperagent restore_"
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent emergency_",
          "hyperagent emergency_",
          "hyperagent emergency_"
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_",
          "hyperagent verify_"
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent notify_"
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent isolate_"
        ]
      },
      {
        "file": ".\\docs\\EXECUTION\\DISASTER_RECOVERY.md",
        "reason": "References unimplemented CLI commands",
        "commands": [
          "hyperagent archive_"
        ]
      }
    ],
    "update_candidates": [
      {
        "file": ".\\requirements-optional.txt",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\SECURITY.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\docs\\TEAM\\LAZAI_REGISTRATION_REQUEST.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CHANGELOG.md",
        "reason": "Contains future tense language",
        "instances": 4
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CHANGELOG.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CODE_OF_CONDUCT.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\CONTRIBUTING.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\SECURITY.md",
        "reason": "Contains future tense language",
        "instances": 4
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\audits\\2017-03.md",
        "reason": "Contains future tense language",
        "instances": 3
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\CONTRIBUTING.md",
        "reason": "Contains future tense language",
        "instances": 2
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\forge-std\\CONTRIBUTING.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\halmos-cheatcodes\\README.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\lib\\openzeppelin-contracts\\lib\\halmos-cheatcodes\\README.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\REPORTS\\archive\\fixes\\production-readiness-assessment.md",
        "reason": "Contains future tense language",
        "instances": 1
      },
      {
        "file": ".\\REPORTS\\IPFS_RAG\\IPFS_RAG_BEST_PRACTICES.md",
        "reason": "Contains future tense language",
        "instances": 1
      }
    ],
    "delete_candidates": []
  }
}